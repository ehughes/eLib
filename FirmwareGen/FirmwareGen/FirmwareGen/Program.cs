using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace FirmwareGen
{
    class Program
    {
        static void Main(string[] args)
        {
            Regex FirmwareNameRegex = new Regex(@".*FIRMWARE_VERSION_STRING\s*""(?<FirmwareName>.*)""\s*", RegexOptions.IgnoreCase);
          
            if(args.Length != 3)
            {
                Console.WriteLine("I need 3 arguments.  The 1st argument is the .bin file name. \r\n  The second argument is the symbol file generated by GCC \r\n The 3d argument is the target output location\r\n");
                return;
            }


            string InputBinFileName = args[0];
            string InputSymbolsFileName= args[1];
            string OutputFolderName = args[2];
                 string FirmwareName = "";

            if(File.Exists(InputSymbolsFileName)== false)
            {
                Console.WriteLine("Could not find file " + InputSymbolsFileName);
                return;
            }

            StreamReader SR = new StreamReader(InputSymbolsFileName);

            while(SR.EndOfStream == false)
            {
                string NextLine = SR.ReadLine();

                MatchCollection M = FirmwareNameRegex.Matches(NextLine);

                if(M.Count>0)
                {
                    if(M[0].Length >0)
                    {
                        FirmwareName = M[0].Groups["FirmwareName"].Value;
                    }
               
                }
            }

            SR.Close();


            if (FirmwareName != "")
            {
                Console.WriteLine("Firmware name detected as " + FirmwareName);
                string NewFirmwareName = FirmwareName + ".bin";

                Console.WriteLine("Cleaning...");

                try
                {
                    
                    if (File.Exists(NewFirmwareName))
                        File.Delete(NewFirmwareName);
                }
                catch(Exception Ex)
                {
                    Console.WriteLine("Could not delete" + NewFirmwareName + " : " + Ex.Message);
                }

                Console.WriteLine("Making a renamed copy...");
       
                try
                {
                  
                    File.Copy(InputBinFileName, NewFirmwareName);
                }
                catch (Exception Ex)
                {

                    Console.WriteLine("Could not copy to" + NewFirmwareName + " : " + Ex.Message);
                }


                Console.WriteLine("Moving renamed copy to destination");

                if(Directory.Exists(OutputFolderName)  == false)
                {
                    try
                    {
                        Directory.CreateDirectory(OutputFolderName);
                    }
                    catch (Exception Ex)
                    {
                        Console.WriteLine("Could not create directory" + OutputFolderName + " : " + Ex.Message);
                    }
                }
                
                    try
                    {
                        if (File.Exists(Path.Combine(OutputFolderName, NewFirmwareName)) == true)
                            File.Delete(Path.Combine(OutputFolderName, NewFirmwareName));

                        File.Copy(InputBinFileName, Path.Combine(OutputFolderName,NewFirmwareName),true);
                    }
                    catch (Exception Ex)
                    {
                        Console.WriteLine("Could not copy to" + Path.Combine(OutputFolderName, NewFirmwareName) + " : " + Ex.Message);
                    }
                
            }

            Console.WriteLine("All Done...");

            return;
        }

  
    }
}
