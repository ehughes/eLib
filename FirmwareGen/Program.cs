// Decompiled with JetBrains decompiler
// Type: FirmwareGen.Program
// Assembly: FirmwareGen, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D6B42EFB-9B7D-491F-8429-37A2FD1FFC0F
// Assembly location: D:\ELI\ARL_LOGGER\DEVELOPMENT_TRUNK\SRC\FIRMWARE\PROJECTS\ARL_LOGGER\SRC\FirmwareGen.exe

using System;
using System.IO;
using System.Text.RegularExpressions;

namespace FirmwareGen
{
  internal class Program
  {
    private static void Main(string[] args)
    {
      Regex regex = new Regex(".*FIRMWARE_VERSION_STRING\\s*\"(?<FirmwareName>.*)\"\\s*", RegexOptions.IgnoreCase);
      if (args.Length != 3)
      {
        Console.WriteLine("I need 3 arguments.  The 1st argument is the .bin file name. \r\n  The second argument is the symbol file generated by GCC \r\n The 3d argument is the target output location\r\n");
      }
      else
      {
        string sourceFileName = args[0];
        string path = args[1];
        string str1 = args[2];
        string str2 = "";
        if (!File.Exists(path))
        {
          Console.WriteLine("Could not find file " + path);
        }
        else
        {
          StreamReader streamReader = new StreamReader(path);
          while (!streamReader.EndOfStream)
          {
            string input = streamReader.ReadLine();
            MatchCollection matchCollection = regex.Matches(input);
            if (matchCollection.Count > 0 && matchCollection[0].Length > 0)
              str2 = matchCollection[0].Groups["FirmwareName"].Value;
          }
          streamReader.Close();
          if (str2 != "")
          {
            Console.WriteLine("Firmware name detected as " + str2);
            string str3 = str2 + ".bin";
            Console.WriteLine("Cleaning...");
            try
            {
              if (File.Exists(str3))
                File.Delete(str3);
            }
            catch (Exception ex)
            {
              Console.WriteLine("Could not delete" + str3 + " : " + ex.Message);
            }
            Console.WriteLine("Making a renamed copy...");
            try
            {
              File.Copy(sourceFileName, str3);
            }
            catch (Exception ex)
            {
              Console.WriteLine("Could not copy to" + str3 + " : " + ex.Message);
            }
            Console.WriteLine("Moving renamed copy to destination");
            if (!Directory.Exists(str1))
            {
              try
              {
                Directory.CreateDirectory(str1);
              }
              catch (Exception ex)
              {
                Console.WriteLine("Could not create directory" + str1 + " : " + ex.Message);
              }
            }
            try
            {
              if (File.Exists(Path.Combine(str1, str3)))
                File.Delete(Path.Combine(str1, str3));
              File.Copy(sourceFileName, Path.Combine(str1, str3), true);
            }
            catch (Exception ex)
            {
              Console.WriteLine("Could not copy to" + Path.Combine(str1, str3) + " : " + ex.Message);
            }
          }
          Console.WriteLine("All Done...");
        }
      }
    }
  }
}
