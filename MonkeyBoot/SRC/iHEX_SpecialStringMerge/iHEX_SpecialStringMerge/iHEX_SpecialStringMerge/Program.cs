using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Text.RegularExpressions;

namespace iHEX_SpecialStringMerge
{
    class Program
    {

        static string NibbleToHexString(byte Input)
        {
            string S;

            Input = (byte)(Input & 0xF);

            switch(Input)
            {
                default:
                case 0: S = "0"; break;
                case 1: S = "1"; break;
                case 2: S = "2"; break;
                case 3: S = "3"; break;
                case 4: S = "4"; break;
                case 5: S = "5"; break;
                case 6: S = "6"; break;
                case 7: S = "7"; break;
                case 8: S = "8"; break;
                case 9: S = "9"; break;
                case 0xA: S = "A"; break;
                case 0xB: S = "B"; break;
                case 0xC: S = "C"; break;
                case 0xD: S = "D"; break;
                case 0xE: S = "E"; break;
                case 0xF: S = "F"; break;
               }

            return S;
        }

        static string ByteToASCII_String(byte Input)
        {
            string S = NibbleToHexString((byte)(Input >> 4));

            S += NibbleToHexString((byte)(Input & 0xF));

            return S;
        }


        static void Main(string[] args)
        {
       
            if (args.Length != 3)
            {
                Console.WriteLine("iHEX_SpecialStringMerge requires 2 arguments.");
                Console.WriteLine("1st:   Symbols file generated by GCC with the FIRMWARE_VERSION string");
                Console.WriteLine("2nd:  The Symbol name that has a quoted string.  I.E. FIRMWARE_VERSION");
                Console.WriteLine("2nd:   Hex File to merge data into");
                return;
            }
            else
            {
                string SourceHexFile = args[2];

                if(File.Exists(SourceHexFile) == false)
                {
                    Console.WriteLine("The hex file " + SourceHexFile + " does not exist");
                    return;
                }
                else
                {

                    
                    string DetectedSpecialString="";
                    string PathToSymbolsFiles = args[0];
                    string SymbolWithString = args[1];   
                  
                    if(File.Exists(PathToSymbolsFiles) == false)
                    {
                        Console.WriteLine("Could not find symbols file!");
                    }

                    Regex regex = new Regex(".*" + SymbolWithString + "\\s*\"(?<SpecialSymbol>.*)\"\\s*", RegexOptions.IgnoreCase);

                    StreamReader streamReader = new StreamReader(PathToSymbolsFiles);

                    while (!streamReader.EndOfStream)
                    {
                        string input = streamReader.ReadLine();
                        MatchCollection matchCollection = regex.Matches(input);
                        if (matchCollection.Count > 0 && matchCollection[0].Length > 0)
                            DetectedSpecialString = matchCollection[0].Groups["SpecialSymbol"].Value;
                    }

                    streamReader.Close();

                    if(DetectedSpecialString =="" || DetectedSpecialString == null)
                    {
                        Console.WriteLine("Special String not found in symbols file.  Using 'NO VERSION'");
                    }

                    byte[] SpecialString = Encoding.ASCII.GetBytes(DetectedSpecialString);

                    StreamWriter outfile = new StreamWriter("tmp.hex");

                    int ByteCount = SpecialString.Length;

                    if (ByteCount > 31)
                        ByteCount = 31;

                    Console.WriteLine("Generating special 06 record with string '" + DetectedSpecialString + "'");
                    outfile.Write(":");
                    outfile.Write(ByteToASCII_String((byte)(ByteCount + 1))); //add one as we will null terminate the string
                    outfile.Write(ByteToASCII_String((byte)0));
                    outfile.Write(ByteToASCII_String((byte)0));
                    outfile.Write("06");

                    int CheckSum = 6 + ByteCount + 1;

                    for(int i=0;i<ByteCount;i++)
                    {
                        outfile.Write(ByteToASCII_String(SpecialString[i]));
                        CheckSum += SpecialString[i];
                    }
                 
                    outfile.Write("00");

                    CheckSum &= 0xFF;
                    CheckSum = ~CheckSum;
                    CheckSum += 1;
                    outfile.Write(ByteToASCII_String((byte)(CheckSum&0xFF)));
                    outfile.Write("\r\n");

                    Console.WriteLine("Merging...");

                    StreamReader InFile = new System.IO.StreamReader(SourceHexFile);
                   
                    string line;
                    while ((line = InFile.ReadLine()) != null)
                    {
                        outfile.WriteLine(line);
                    }

                    InFile.Close();
                    outfile.Close();

                    File.Delete(SourceHexFile);
                    File.Move("tmp.hex", SourceHexFile);

                    Console.WriteLine("All Done");
                }
            }

        }
    }
}
